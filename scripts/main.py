# !/usr/bin/env python
import os
import uuid
import telebot
from telebot import types
import speech_recognition as sr
from pydub import AudioSegment
from dotenv import load_dotenv

from functions import (
    init_db,
    check_user,
    register_user,
    get_user_lang,
    set_user_lang
)

'''
    Initialization
'''
load_dotenv()
TOKEN = os.environ.get('APP_TOKEN')
bot = telebot.TeleBot(TOKEN)
init_db()


@bot.message_handler(content_types=['audio', 'voice'])
def handle_voice(message):

    try:
        user_lang = get_user_lang(chat_id=message.chat.id)
        user_lang_mark = 'üá∑üá∫' if user_lang == 'ru-RU' else 'üá¨üáß'
        unique_name = uuid.uuid4()
        wav_file = f'{unique_name}.wav'
        ogg_file = f'{unique_name}.ogg'

        if message.content_type == 'audio':
            file_info = bot.get_file(message.audio.file_id)
        else:
            file_info = bot.get_file(message.voice.file_id)

        downloaded_file = bot.download_file(file_info.file_path)
        with open(ogg_file, 'wb') as new_file:
            new_file.write(downloaded_file)

        # transpile
        sound = AudioSegment.from_file(ogg_file)
        sound.export(wav_file, format='wav')
        #
        r = sr.Recognizer()
        with sr.AudioFile(wav_file) as source:
            audio = r.record(source)
            out = f'–ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–∞ {user_lang_mark}\n\r'
            out += r.recognize_google(audio, language=user_lang)

        # clean
        os.remove(wav_file)
        os.remove(ogg_file)
    except Exception as e:
        print(e)
        out = '–°–æ—Ä—Ä–∏, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...'

    finally:
        bot.reply_to(message, out)


@bot.message_handler(
    content_types=[content_type for content_type in ['text', 'document', 'sticker', 'photo', 'video'] if
                   content_type not in ['audio', 'voice']])
def handle_data(message):
    lang_ru = types.InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='ru')
    lang_en = types.InlineKeyboardButton('üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π', callback_data='en')

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(lang_ru)
    keyboard.add(lang_en)

    chat_id = message.chat.id

    if not check_user(chat_id):
        register_user(chat_id)

    if message.text.startswith('/start'):
        out = '–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç.\n'
        out += '–Ø –º–æ–≥—É —Ä–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º üá¨üáß –∏ —Ä—É—Å—Å–∫–æ–º üá∑üá∫ —è–∑—ã–∫–∞—Ö. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–±–æ—Ç–∞—é —Å —Ä—É—Å—Å–∫–∏–º üá∑üá∫, –Ω–æ '
        out += '—Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö /settings.'

    elif message.text.startswith('/lang'):
        result = get_user_lang(chat_id)
        if result == 'ru-RU':
            out = '–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ üá∑üá∫'
        else:
            out = '–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ üá¨üáß'

    elif message.text.startswith('/settings'):
        bot.send_message(chat_id, text='–Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=keyboard)

    elif message.text.startswith('/help'):
        out = '–ü—Ä–∏–≤–µ—Ç üëã. –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –ö–∏—Ä–∏–ª–ª –∏ –ú–µ—Ñ–æ–¥–∏–π —Å–æ–∑–¥–∞–ª–∏ –ø–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ 860-—Ö –≥–æ–¥–æ–≤, '
        out += '–∫—Ç–æ-—Ç–æ –µ—â–µ üò† –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —á–∞—Ç–∞—Ö. –ú–æ—è –º–∏—Å—Å–∏—è - –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —Ä–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n'
        out += '–ü—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏—Å—å —Å–æ –º–Ω–æ–π –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –≤ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç.'
    else:
        out = '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –Ø –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.'

    if not message.text.startswith('/setting'):
        bot.reply_to(message, out)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.from_user.id

    if call.data == 'ru':
        result = get_user_lang(chat_id=user_id)
        if result == 'ru-RU':
            out = '–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ —É–∂–µ üá∑üá∫'
        else:
            if set_user_lang(chat_id=user_id, lang='ru-RU'):
                out = '–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ üá∑üá∫'
            else:
                out = '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'

    elif call.data == 'en':
        result = get_user_lang(chat_id=user_id)
        if result == 'en-EN':
            out = '–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ —É–∂–µ üá¨üáß'
        else:
            if set_user_lang(chat_id=user_id, lang='en-EN'):
                out = '–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ üá¨üáß'
            else:
                out = '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'

    bot.send_message(user_id, out)


bot.polling()
